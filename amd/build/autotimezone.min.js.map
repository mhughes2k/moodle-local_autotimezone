{"version":3,"file":"autotimezone.min.js","sources":["../src/autotimezone.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Log from 'core/log';\nimport {checkTimezone, deferChecks, updateTimeZone} from './repository';\nimport UpdateIgnoreModal from './modal_update_ignore';\nimport Pending from 'core/pending';\nimport {getString, getStrings} from 'core/str';\nimport {DEFAULT_CONFIG, STRINGS} from './common';\n\n\nvar STRING = null;\nvar CONFIG = null;\n/**\n * Automatic Time Zone Switcher.\n * @param {string} currentTimeZone The user's current timezone identifier.\n * @param {int} delay Number of seconds to delay checks by.\n */\nexport const init = async(\n    currentTimeZone,\n    delay\n) => {\n    const RESULT_MATCH = \"match\";\n    CONFIG = DEFAULT_CONFIG;\n    CONFIG.delay = delay;\n    Log.info(\"Loading autotimezone\");\n    Log.debug(CONFIG);\n    const stringValues = await getStrings(\n        STRINGS.map(\n            (key) => ({key, component: 'local_autotimezone'}))\n    );\n    STRING = new Map(STRINGS.map((key, index) => ([key, stringValues[index]])));\n    Log.debug(STRING);\n\n    Log.info(currentTimeZone);\n    // We need access to the geolocation API.\n    if (!navigator.geolocation) {\n        Log.warn(\"No geolocation API available\");\n        return;\n    } else {\n        Log.info(\"Geolocation API available\");\n    }\n\n    // If the user's current location is not within the current time zone, we will switch it.\n    let watchid = navigator.geolocation.watchPosition(\n        (pos) => {\n            Log.info(\"Got position: \" + pos.coords.latitude + \", \" + pos.coords.longitude);\n            // Determine if current pos.coords is within the current time zone using api.timezonedb.com\n            checkTimezone(pos.coords.latitude, pos.coords.longitude)\n            .then((data) => {\n                Log.info(data);\n                if (data.status != RESULT_MATCH) {\n                    Log.warn(\"No match\");\n                    Log.info(\"Current time zone: \" + data.profiletimezone);\n                    Log.warn(\"New time zone \" + data.timezone);\n                    // Display some sort UI to the user to indicate that they're real\n                    // location doesn't match their time zone.\n                    // We really want this to be *non*-interruptive, but noticeable.\n                    updateIgnore(\n                        data.profiletimezone,\n                        data.timezone,\n                        () => {\n                            Log.info(\"Updating time zone to \" + data.timezone);\n                            updateTimeZone(data.timezone).then(() => {\n                                window.location.reload();\n                                return true;\n                            })\n                            .fail(() => {\n                                Log.error(\"Failed to update time zone\");\n                                return false;\n                            });\n\n                        },\n\n                        () => {\n                            // Set user preference to not trigger checking for at least 24 hrs.\n                            const delayms = CONFIG.delay * 1000;\n                            const now = new Date();\n                            const nextCheck = new Date();\n                            nextCheck.setTime(now.getTime() + delayms);\n                            Log.info(\"Stopping location changes for \" + CONFIG.delay + \" hrs \" + nextCheck.toISOString());\n                            deferChecks(nextCheck.getTime() / 1000);// Convert to unixtimestamp in seconds.\n                        }\n                    );\n                }\n                navigator.geolocation.clearWatch(watchid);\n                return true;\n            })\n            .fail((error) => {\n                Log.error(error);\n                navigator.geolocation.clearWatch(watchid);\n                return false;\n            });\n        },\n        (error) => {\n            Log.error(error);\n            if (error.code == 2) {\n                Log.error(\"Unable to establish position\");\n            }\n            navigator.geolocation.clearWatch(watchid);\n        });\n};\n\n/**\n * Display the warning modal\n * @param {string} profileTz  Timezone in user's profile.\n * @param {string} currentTz {string Timezone determined by location.\n * @param {callback} updateCallback\n * @param {callback} cancelCallback\n * @returns {Promise<Modal>}\n */\nexport const updateIgnore = async(profileTz, currentTz, updateCallback, cancelCallback) => {\n    var pendingPromise = new Pending('local/autotimezone:updateIgnore');\n\n    const [\n        ModalEvents\n    ] = await Promise.all([\n        import('core/modal_events')\n    ]);\n\n    const title = STRING.get('updatemodaltitle');\n    const body = await getString(\n        'updatemodalbody', 'local_autotimezone',\n        {profileTz: profileTz, currentTz: currentTz}\n    );\n    const updateto = await getString(\n        'updatetimezoneto', 'local_autotimezone',\n        {currentTz: currentTz}\n    );\n    const ignoreforXhrs = await getString(\n        'ignoreforXhrs', 'local_autotimezone',\n        {delay: CONFIG.delay / 3600}\n    );\n    const modal = await UpdateIgnoreModal.create({\n        title,\n        body: body,\n        buttons: {\n            save: updateto,\n            cancel: ignoreforXhrs\n        },\n        removeOnClose: true,\n        show: true\n    });\n    modal.getRoot().on(ModalEvents.save, updateCallback);\n    modal.getRoot().on(ModalEvents.cancel, cancelCallback);\n    pendingPromise.resolve();\n    return modal;\n};\n"],"names":["STRING","CONFIG","async","currentTimeZone","delay","DEFAULT_CONFIG","info","debug","stringValues","STRINGS","map","key","component","Map","index","navigator","geolocation","warn","watchid","watchPosition","pos","coords","latitude","longitude","then","data","status","profiletimezone","timezone","updateIgnore","window","location","reload","fail","error","delayms","now","Date","nextCheck","setTime","getTime","toISOString","clearWatch","code","profileTz","currentTz","updateCallback","cancelCallback","pendingPromise","Pending","ModalEvents","Promise","all","title","get","body","updateto","ignoreforXhrs","modal","UpdateIgnoreModal","create","buttons","save","cancel","removeOnClose","show","getRoot","on","resolve"],"mappings":"qrBAuBIA,OAAS,KACTC,OAAS,mBAMOC,MAChBC,gBACAC,UAGAH,OAASI,wBACFD,MAAQA,mBACXE,KAAK,qCACLC,MAAMN,cACJO,mBAAqB,mBACvBC,gBAAQC,KACHC,OAAUA,IAAAA,IAAKC,UAAW,6BAEnCZ,OAAS,IAAIa,IAAIJ,gBAAQC,KAAI,CAACC,IAAKG,QAAW,CAACH,IAAKH,aAAaM,wBAC7DP,MAAMP,qBAENM,KAAKH,kBAEJY,UAAUC,qCACPC,KAAK,6CAGLX,KAAK,iCAITY,QAAUH,UAAUC,YAAYG,eAC/BC,mBACOd,KAAK,iBAAmBc,IAAIC,OAAOC,SAAW,KAAOF,IAAIC,OAAOE,yCAEtDH,IAAIC,OAAOC,SAAUF,IAAIC,OAAOE,WAC7CC,MAAMC,oBACCnB,KAAKmB,MA5BA,SA6BLA,KAAKC,sBACDT,KAAK,yBACLX,KAAK,sBAAwBmB,KAAKE,8BAClCV,KAAK,iBAAmBQ,KAAKG,UAIjCC,aACIJ,KAAKE,gBACLF,KAAKG,UACL,kBACQtB,KAAK,yBAA2BmB,KAAKG,yCAC1BH,KAAKG,UAAUJ,MAAK,KAC/BM,OAAOC,SAASC,UACT,KAEVC,MAAK,kBACEC,MAAM,+BACH,QAKf,WAEUC,QAAyB,IAAflC,OAAOG,MACjBgC,IAAM,IAAIC,KACVC,UAAY,IAAID,KACtBC,UAAUC,QAAQH,IAAII,UAAYL,sBAC9B7B,KAAK,iCAAmCL,OAAOG,MAAQ,QAAUkC,UAAUG,2CACnEH,UAAUE,UAAY,SAI9CzB,UAAUC,YAAY0B,WAAWxB,UAC1B,KAEVe,MAAMC,qBACCA,MAAMA,OACVnB,UAAUC,YAAY0B,WAAWxB,UAC1B,QAGdgB,qBACOA,MAAMA,OACQ,GAAdA,MAAMS,mBACFT,MAAM,gCAEdnB,UAAUC,YAAY0B,WAAWxB,mBAYhCW,aAAe3B,MAAM0C,UAAWC,UAAWC,eAAgBC,sBAChEC,eAAiB,IAAIC,iBAAQ,yCAG7BC,mBACMC,QAAQC,IAAI,umBAIhBC,MAAQrD,OAAOsD,IAAI,oBACnBC,WAAa,kBACf,kBAAmB,qBACnB,CAACX,UAAWA,UAAWC,UAAWA,YAEhCW,eAAiB,kBACnB,mBAAoB,qBACpB,CAACX,UAAWA,YAEVY,oBAAsB,kBACxB,gBAAiB,qBACjB,CAACrD,MAAOH,OAAOG,MAAQ,OAErBsD,YAAcC,6BAAkBC,OAAO,CACzCP,MAAAA,MACAE,KAAMA,KACNM,QAAS,CACLC,KAAMN,SACNO,OAAQN,eAEZO,eAAe,EACfC,MAAM,WAEVP,MAAMQ,UAAUC,GAAGjB,YAAYY,KAAMhB,gBACrCY,MAAMQ,UAAUC,GAAGjB,YAAYa,OAAQhB,gBACvCC,eAAeoB,UACRV"}